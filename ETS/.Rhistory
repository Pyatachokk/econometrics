rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
table
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table
get_months <- function(year, last_val) {
# создаёт помесячную разбивку, начиная с января указанного года и заканчивая последним значением месяца
year <- year
month <- 1
counter <- 1
vals <- list()
while (counter <= last_val) {
vals[counter] <- paste('01', '-', month, '-', year, sep = '')
month <- month + 1
if (month == 13) {
year = year + 1
month = 1
}
counter <- counter + 1
}
return(unlist(vals))
}
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
as.numeric(ts_frame$percent_to_last_period)
table
as.numeric(table$percent_to_last_period)
as.numeric(as.character(table$percent_to_period_last_year))
as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(as.character(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)))
table$percent_to_last_period <- as.numeric(as.character(sub(",", ".", table$percent_to_last_period, fixed = TRUE)))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(sub(",", ".", as.character(table$percent_to_period_last_year), fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", as.character(table$percent_to_last_period), fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
table
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
print(ts_frame, digits=10)
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
options(digits = 7)
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
options(digits = 20)
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
table
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
#table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
#table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table$percent_to_period_last_year <- as.numeric(table$percent_to_period_last_year)
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table$percent_to_period_last_year <- as.numeric(as.character(table$percent_to_period_last_year))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
install.packages("meme")
library(meme)
qt(.99, 998)
qnorm(.95)
qnorm(.975)
qt(.995, 998)
probit <- glm(y ~ x1, family = binomial (link = "probit"))
pnorm(1)
pnorm(0.99)
0.08 * 1 / sqrt(2*3.14)*exp(0.99)
qnorm(.975, mean = -0.17, sd = 0.0004)
pchisq(1/20, 9)
pchisq(q=10/200, df=5)
1 - pchisq(1/20, 5)
1 - pchisq(10, 5)
pchisq(10, 5)
install.packages("devtools")
devtools::install_github("bdemeshev/bvarr")
res <- data("austres")
res
res.head()
res.head
head(res)
res <- data(austres)
res
res[1]
data("austres")
head(austres)
austers
austres
library('bvarr')
devtools::install_github("bdemeshev/bvarr")
library(bvarr)
devtools::install_github("bdemeshev/bvarr")
library('bvarr')
data("austres")
austres
data("sunspot.year")
sunflowerplot()
data("sunspots")
sunspots
setup <- bvar_conj_setup(sunspots, p=2)
data(Yraw)
setup <- bvar_conj_setup(Yraw, p=2)
sunspot.year
data("sunspot.year")
setup <- bvar_conj_setup(sunspot.year, p=2)
setup <- bvar_conj_setup(sunspot.year, p=4)
setup <- bvar_conj_setup(sunspot.year, p=8)
na.remove(sunspots)
na.action = na.omit
na.exclude(sunspots)
setup <- bvar_conj_setup(sunspots, p=8)
data("freeny")
freeny
setup <- bvar_conj_setup(freeny, p=8)
setup <- bvar_conj_setup(sunspots, p=2)
setup <- bvar_conj_setup(freeny, p=2)
model <- bvar_conj_estimate(setup)
bvar_conj_summary(model)
bvar_conj_forecast(model, h = 4)
head(freeny)
install_github("kthohr/BMR")
library(devtools)
install_github("kthohr/BMR")
library("BMR")
install_github("kthohr/BMR")
library(devtools)
install_github("kthohr/BMR")
install.packages(c("AER", "anytime", "backports", "bayesplot", "betareg", "broom", "callr", "car", "carData", "caret", "caTools", "chron", "class", "cluster", "codetools", "coin", "commonmark", "curl", "data.table", "dbplyr", "ddalpha", "dimRed", "DistributionUtils", "DT", "e1071", "effects", "emmeans", "estimatr", "evaluate", "exams", "expm", "ffbase", "flexmix", "FNN", "forcats", "forecast", "foreign", "generics", "geometry", "ggeffects", "ggridges", "glmmTMB", "gower", "haven", "highr", "htmlwidgets", "httpuv", "httr", "huxtable", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "ks", "later", "lattice", "lava", "lme4", "magic", "maptools", "markdown", "MASS", "Matrix", "mclust", "memisc", "merTools", "mfx", "mgcv", "mime", "ModelMetrics", "modelr", "modeltools", "multcomp", "mvtnorm", "nloptr", "nycflights13", "openssl", "pander", "prediction", "processx", "progress", "psych", "Quandl", "quantmod", "RApiDatetime", "RcppEigen", "RcppRoll", "RCurl", "readxl", "recipes", "RecordLinkage", "repr", "reprex", "reshape", "rio", "RJSONIO", "rmarkdown", "rmutil", "robustbase", "roxygen2", "rstudioapi", "rugarch", "sandwich", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "SkewHyperbolic", "skimr", "slam", "snakecase", "sp", "stringdist", "survey", "survival", "sys", "testthat", "TH.data", "tidyr", "tinytex", "TMB", "tseries", "tsibble", "TTR", "uroot", "XML", "xtable", "xts", "yaml", "zip", "zoo"))
install.packages("devtools")
library(devtools)
install_github("kthohr/BMR")
install.packages("clang")
install.packages("gfortran")
install.packages("msbvar")
install.packages("~/Downloads/MSBVAR_0.1.1.tar", repos = NULL)
install.packages("~/Downloads/MSBVAR_0.1.1.tar", repos = NULL, type = 'binary')
install.packages("~/Downloads/MSBVAR_0.1.1.tar", repos = NULL, type = 'source')
library(MSBVAR)
msb <- msbvar(freeny)
install.packages("~/Downloads/MSBVAR_0.9-3.tar", repos = NULL)
install.packages("~/Downloads/MSBVAR_0.9-3.tar", repos = NULL, type = 'source')
install.packages("bvarsv")
library(bvarsv)
bvar.sv.tvp(freeny, p = 2, nf = 4)
freeny
bvar.sv.tvp(freeny, p = 1, nf = 2)
bvar.sv.tvp(freeny, p = 1, nf = 1)
bvar.sv.tvp(freeny, p = 2, nf = 4)
bvar.sv.tvp(freeny, p = 2, nf = 4, tau = 10)
bvar.sv.tvp(freeny, p = 2, tau = 5 nf = 4)
bvar.sv.tvp(freeny, p = 2, tau = 5, nf = 4)
bvar.sv.tvp(as.data.frame(freeny), p = 2, tau = 5, nf = 4)
bvar.sv.tvp(freeny, p = 1, tau = 1, nf = 1)
install.packages("devtools")
library(devtools)
install_github("kthohr/BMR")
data(Yraw)
data("sunspot.year")
bvar.sv.tvp(sunspot.year, tau = 10, p = 2, nf = 4)
sunspot.year
freeny
library(BMR)
install.packages("BMR")
qt(.995)
qnorm(.995)
setwd("~/Documents/RStudio/ETS_METRICS")
library(rio) # импорт данных
library(tidyverse) # обработка данных
library(stringr) # работа с текстовыми переменными
library(forecat) # прогнозирование
library(rio) # импорт данных
library(tidyverse) # обработка данных
library(stringr) # работа с текстовыми переменными
library(forecast) # прогнозирование
install.packages("forecast")
library(forecast) # прогнозирование
library(rio) # импорт данных
library(tidyverse) # обработка данных
library(stringr) # работа с текстовыми переменными
library(forecast) # прогнозирование
m0 = import('marriage_data_raw.xls')
head(m0)
view(m0)
library(rio) # импорт данных
library(tidyverse) # обработка данных
library(stringr) # работа с текстовыми переменными
library(forecast) # прогнозирование
m0 = import('marriage_data_raw.xls')
#m0 = import('~/Downloads/file')
#Sys.setenv(language='russian')
head(m0)
#view(m0)
m1 = tail(m0, -2) # Первые две строки удаляем
colnames(m1) = c('region', 'unit', 'period', 2006:2018) # Присваиваем нормальные имена переменным
qplot(data=m1, x = unit)
m2 = select(m1, -unit)
glimpse(m2)
m3 = filter(m2, !str_detect(period, '-'))
glimpse(m3)
strange_names = union(m3$period)
strange_names
strange_names = unique(m3$period)
strange_names
coder = tibble(period = strange_names, month = 1:12)
coder
glimpse(m4)
m4 = left_join(m3, coder, by='period')
glimpse(m4)
m5 = select(m4, -period)
m5
glimpse(m5)
m6 = gather(m5, key = 'year', value = 'marriage', -region, -month)
glimpse(m6)
m7 = mutate(m6, year = as.numeric(year), marriage = as.numeric(marriage))
glimpse(m7)
m8 = filter(m7, str_detect(region, 'Архангельская'))
m9 = arrange(m8, year, month)
unique(m7$region)
m8 = filter(m7, str_detect(region, '11000000000 Архангельская область'))
m9 = arrange(m8, year, month)
m9
y = ts(m9$marriagem, start =  c(2006, 1), frequency = 12)
y = ts(m9$marriage, start =  c(2006, 1), frequency = 12)
ggseasonplot(y)
ggtsdisplay(y)
model_aaa = ets(y, model = 'AAA', damped = FALSE)
autoplot(model_aaa)
model_aaa$states %>% head()
prognoz = forecast(model_aaa, h = 24)
prognoz
autoplot(prognoz)
library(rio) # Импорт данных
library(tidyverse) # Обработка данных
library(stringr) # Работа с текстовыми переменными
library(forecast) # Прогнозирование
m0 = import('marriage_data_raw.xls')
# Другие способы импорта
# m0 = import('~/Downloads/file')
# Sys.setenv(language='russian')
# library(readxl)
# m0 = read_excel(.)
head(m0)
# view(m0)
m1 = tail(m0, -2) # Первые две строки удаляем
colnames(m1) = c('region', 'unit', 'period', 2006:2018) # Присваиваем нормальные имена переменным
qplot(data = m1, x = unit) # Кроме unit ничего нет, unit -- удаляем
m2 = select(m1, -unit)
glimpse(m2)
m3 = filter(m2, !str_detect(period, '-')) # Удаляем неправильные (по нашему предположению) месяцы
glimpse(m3)
strange_names = unique(m3$period)
strange_names
coder = tibble(period = strange_names, month = 1:12)
coder
m4 = left_join(m3, coder, by = 'period')
glimpse(m4)
m5 = select(m4, -period)
glimpse(m5) # такой формат называется широким (wide)
m6 = gather(m5, key = 'year', value = 'marriage', -region, -month)
glimpse(m6)
m7 = mutate(m6, year = as.numeric(year), marriage = as.numeric(marriage))
glimpse(m7)
m8 = filter(m7, str_detect(region, 'Архангельская'))
m9 = arrange(m8, year, month)
m8 = filter(m7, str_detect(region, '11000000000 Архангельская область'))
m9 = arrange(m8, year, month)
m9
m8
y = ts(m9$marriage, start =  c(2006, 1), frequency = 12)
ggseasonplot(y)
ggtsdisplay(y)
model_aaa = ets(y, model = 'AAA', damped = FALSE)
autoplot(model_aaa)
model_aaa$states %>% head()
prognoz = forecast(model_aaa, h = 24)
prognoz
autoplot(prognoz)
