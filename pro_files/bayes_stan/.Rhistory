)
frame <- frame[duplicated(frame), ]
ts_frame <- as_tsibble(unique(frame), index = date)
ts_frame
frame
frame <- read.csv2(url,skip = 1)
frame <- frame %>% select(close, begin)
frame$begin <- as.Date(frame$begin, format = "%Y-%m-%d %H:%M:%S")
frame$access_date <- Sys.Date()
frame <- frame[,c(2,1,3)]
colnames(frame) <- c('date', 'RTS_close', 'access_date')
frame <- frame[duplicated(frame), ]
frame
url <- 'https://iss.moex.com/iss/engines/stock/markets/index/securities/RTSI/candles.csv?iss.only=history&interval=31&iss.reverse=true&from=1995-09-01&till=2019-01-01&iss.json=extended&callback=JSON_CALLBACK&lang=ru&limit=100&start=0&sort_order=TRADEDATE&sort_order_desc=desc&_=1548768931779'
frame <- read.csv2(url,skip = 1)
frame <- frame %>% select(close, begin)
frame$begin <- as.Date(frame$begin, format = "%Y-%m-%d %H:%M:%S")
frame$access_date <- Sys.Date()
frame <- frame[,c(2,1,3)]
colnames(frame) <- c('date', 'RTS_close', 'access_date')
frame <- frame[!duplicated(frame), ]
frame
ts_frame <- as_tsibble(unique(frame), index = date)
find_duplicates(frame)
find_duplicates(frame, index=date)
url <- 'https://iss.moex.com/iss/engines/stock/markets/index/securities/RTSI/candles.csv?iss.only=history&interval=31&iss.reverse=true&from=1995-09-01&till=2019-01-01&iss.json=extended&callback=JSON_CALLBACK&lang=ru&limit=100&start=0&sort_order=TRADEDATE&sort_order_desc=desc&_=1548768931779'
frame <- read.csv2(url,skip = 1)
frame <- frame %>% select(close, begin)
frame$begin <- as.Date(frame$begin, format = "%Y-%m-%d %H:%M:%S")
frame$access_date <- Sys.Date()
frame <- frame[,c(2,1,3)]
colnames(frame) <- c('date', 'RTS_close', 'access_date')
frame <- frame[!find_duplicates(frame), ]
frame <- frame[!find_duplicates(frame, index = date), ]
ts_frame <- as_tsibble(unique(frame), index = date)
frame <- read.csv2(url,skip = 1)
frame <- frame %>% select(close, begin)
frame$begin <- as.Date(frame$begin, format = "%Y-%m-%d %H:%M:%S")
frame$access_date <- Sys.Date()
frame <- frame[,c(2,1,3)]
colnames(frame) <- c('date', 'RTS_close', 'access_date')
frame <- frame[!find_duplicates(frame, index = date), ]
ts_frame <- as_tsibble(frame, index = date)
ts_frame
library(rio)
library(tidyverse)
library(tsibble)
library(rvest)
library(selectr)
library(xml2)
library(docxtractr)
Sys.setlocale("LC_TIME","C")
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
real_world
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
table
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table
get_months <- function(year, last_val) {
# создаёт помесячную разбивку, начиная с января указанного года и заканчивая последним значением месяца
year <- year
month <- 1
counter <- 1
vals <- list()
while (counter <= last_val) {
vals[counter] <- paste('01', '-', month, '-', year, sep = '')
month <- month + 1
if (month == 13) {
year = year + 1
month = 1
}
counter <- counter + 1
}
return(unlist(vals))
}
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
as.numeric(ts_frame$percent_to_last_period)
table
as.numeric(table$percent_to_last_period)
as.numeric(as.character(table$percent_to_period_last_year))
as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(as.character(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)))
table$percent_to_last_period <- as.numeric(as.character(sub(",", ".", table$percent_to_last_period, fixed = TRUE)))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(sub(",", ".", as.character(table$percent_to_period_last_year), fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", as.character(table$percent_to_last_period), fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
table
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
print(ts_frame, digits=10)
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
options(digits = 7)
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
options(digits = 20)
table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
table
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
#table$percent_to_period_last_year <- as.numeric(sub(",", ".", table$percent_to_period_last_year, fixed = TRUE))
#table$percent_to_last_period <- as.numeric(sub(",", ".", table$percent_to_last_period, fixed = TRUE))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table$percent_to_period_last_year <- as.numeric(table$percent_to_period_last_year)
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table$percent_to_period_last_year <- as.numeric(as.character(table$percent_to_period_last_year))
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
url <- 'http://www.gks.ru/free_doc/new_site/population/urov/urov_12kv.doc'
set_libreoffice_path('/Applications/LibreOffice.app/Contents/MacOS/soffice')
real_world <- read_docx(url)
table <- docx_extract_tbl(real_world, 2)
table <- as.data.frame(table)
table <- table[-c(1, 2, 74, 75), ] # две строки в начале и две пустые строки
colnames(table) <- c('date', 'percent_to_period_last_year', 'percent_to_last_period')
table <- table[!grepl("квартал", table$date),]
table <- table[!grepl("Год", table$date),]
table <- table[!grepl("год", table$date),]
rownames(table) <- 1:nrow(table)
table$date <- get_months(2008, nrow(table)) # функция get_months ниже
table$date <- as.Date(table$date, format = "%d-%m-%Y")
table$access_date <- Sys.Date()
table <- table[,c(1, 4, 2, 3)]
colnames(table) <- c('date', 'access_date', 'percent_to_period_last_year', 'percent_to_last_period')
table$percent_to_period_last_year <- sub(",", ".", table$percent_to_period_last_year, fixed = TRUE)
table$percent_to_last_period <- sub(",", ".", table$percent_to_last_period, fixed = TRUE)
table <- table[!find_duplicates(table, index = date), ]
ts_frame <- as_tsibble(table, index = date)
ts_frame
install.packages("meme")
library(meme)
qt(.99, 998)
qnorm(.95)
qnorm(.975)
qt(.995, 998)
probit <- glm(y ~ x1, family = binomial (link = "probit"))
pnorm(1)
pnorm(0.99)
0.08 * 1 / sqrt(2*3.14)*exp(0.99)
qnorm(.975, mean = -0.17, sd = 0.0004)
pchisq(1/20, 9)
pchisq(q=10/200, df=5)
1 - pchisq(1/20, 5)
1 - pchisq(10, 5)
pchisq(10, 5)
install.packages("devtools")
devtools::install_github("bdemeshev/bvarr")
res <- data("austres")
res
res.head()
res.head
head(res)
res <- data(austres)
res
res[1]
data("austres")
head(austres)
austers
austres
library('bvarr')
devtools::install_github("bdemeshev/bvarr")
library(bvarr)
devtools::install_github("bdemeshev/bvarr")
library('bvarr')
data("austres")
austres
data("sunspot.year")
sunflowerplot()
data("sunspots")
sunspots
setup <- bvar_conj_setup(sunspots, p=2)
data(Yraw)
setup <- bvar_conj_setup(Yraw, p=2)
sunspot.year
data("sunspot.year")
setup <- bvar_conj_setup(sunspot.year, p=2)
setup <- bvar_conj_setup(sunspot.year, p=4)
setup <- bvar_conj_setup(sunspot.year, p=8)
na.remove(sunspots)
na.action = na.omit
na.exclude(sunspots)
setup <- bvar_conj_setup(sunspots, p=8)
data("freeny")
freeny
setup <- bvar_conj_setup(freeny, p=8)
setup <- bvar_conj_setup(sunspots, p=2)
setup <- bvar_conj_setup(freeny, p=2)
model <- bvar_conj_estimate(setup)
bvar_conj_summary(model)
bvar_conj_forecast(model, h = 4)
head(freeny)
install_github("kthohr/BMR")
library(devtools)
install_github("kthohr/BMR")
library("BMR")
install_github("kthohr/BMR")
library(devtools)
install_github("kthohr/BMR")
install.packages(c("AER", "anytime", "backports", "bayesplot", "betareg", "broom", "callr", "car", "carData", "caret", "caTools", "chron", "class", "cluster", "codetools", "coin", "commonmark", "curl", "data.table", "dbplyr", "ddalpha", "dimRed", "DistributionUtils", "DT", "e1071", "effects", "emmeans", "estimatr", "evaluate", "exams", "expm", "ffbase", "flexmix", "FNN", "forcats", "forecast", "foreign", "generics", "geometry", "ggeffects", "ggridges", "glmmTMB", "gower", "haven", "highr", "htmlwidgets", "httpuv", "httr", "huxtable", "ipred", "iterators", "jsonlite", "kernlab", "knitr", "ks", "later", "lattice", "lava", "lme4", "magic", "maptools", "markdown", "MASS", "Matrix", "mclust", "memisc", "merTools", "mfx", "mgcv", "mime", "ModelMetrics", "modelr", "modeltools", "multcomp", "mvtnorm", "nloptr", "nycflights13", "openssl", "pander", "prediction", "processx", "progress", "psych", "Quandl", "quantmod", "RApiDatetime", "RcppEigen", "RcppRoll", "RCurl", "readxl", "recipes", "RecordLinkage", "repr", "reprex", "reshape", "rio", "RJSONIO", "rmarkdown", "rmutil", "robustbase", "roxygen2", "rstudioapi", "rugarch", "sandwich", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "SkewHyperbolic", "skimr", "slam", "snakecase", "sp", "stringdist", "survey", "survival", "sys", "testthat", "TH.data", "tidyr", "tinytex", "TMB", "tseries", "tsibble", "TTR", "uroot", "XML", "xtable", "xts", "yaml", "zip", "zoo"))
install.packages("devtools")
library(devtools)
install_github("kthohr/BMR")
install.packages("clang")
install.packages("gfortran")
install.packages("msbvar")
install.packages("~/Downloads/MSBVAR_0.1.1.tar", repos = NULL)
install.packages("~/Downloads/MSBVAR_0.1.1.tar", repos = NULL, type = 'binary')
install.packages("~/Downloads/MSBVAR_0.1.1.tar", repos = NULL, type = 'source')
library(MSBVAR)
msb <- msbvar(freeny)
install.packages("~/Downloads/MSBVAR_0.9-3.tar", repos = NULL)
install.packages("~/Downloads/MSBVAR_0.9-3.tar", repos = NULL, type = 'source')
install.packages("bvarsv")
library(bvarsv)
bvar.sv.tvp(freeny, p = 2, nf = 4)
freeny
bvar.sv.tvp(freeny, p = 1, nf = 2)
bvar.sv.tvp(freeny, p = 1, nf = 1)
bvar.sv.tvp(freeny, p = 2, nf = 4)
bvar.sv.tvp(freeny, p = 2, nf = 4, tau = 10)
bvar.sv.tvp(freeny, p = 2, tau = 5 nf = 4)
bvar.sv.tvp(freeny, p = 2, tau = 5, nf = 4)
bvar.sv.tvp(as.data.frame(freeny), p = 2, tau = 5, nf = 4)
bvar.sv.tvp(freeny, p = 1, tau = 1, nf = 1)
install.packages("devtools")
library(devtools)
install_github("kthohr/BMR")
data(Yraw)
data("sunspot.year")
bvar.sv.tvp(sunspot.year, tau = 10, p = 2, nf = 4)
sunspot.year
freeny
library(BMR)
install.packages("BMR")
qt(.995)
qnorm(.995)
R_Matr_SR_BLeit = matrix(c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0),
byrow = TRUE, ncol = 18, nrow = 9)
R_Matr_SR_BLeit = matrix(c(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0),
byrow = TRUE, nrow = 9)
R_Matr_SR_BLeit
install.packages("phonTools")
library(phonTools)
install.packages("optimbase")
library(optimbase)
install.packages("rstan", repos = "https://cloud.r-project.org", dependencies = TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # должно получиться 10
library(rstan)
options(mc.cores = parallel::detectCores())
library(bayesplot)
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE) # компилируем один раз
coin_model = stan_model(file = 'coin.stan')
setwd("~/bayes_stan")
coin_model = stan_model(file = 'coin.stan')
coin_data = list(y = c(1, 1, 1, 0, 0, 1), N = 6)
post_sample = sampling(coin_model, coin_data)
View(post_sample)
post_sample
post_array = as.array(post_sample)
mcmc_hist(post_array)
